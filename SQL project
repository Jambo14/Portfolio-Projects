CREATE TABLE applestore_description_combinbed AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4


** EXPLORATORY DATA ANALYSIS**

-- Check the numbe of unique apps in both tablesAppleStore

SELECT COUNT (DISTINCT id) AS UniqueAppIDs
FROM AppleStore

SELECT COUNT (DISTINCT id) AS UniqueAppIDs
FROM applestore_description_combinbed

-- Check for any missing values in key fieldsaAppleStore

SELECT COUNT(*) AS Missingvalues
FROM AppleStore
WHERE track_name IS NULL OR user_rating IS NULL OR prime_genre IS NULL

SELECT COUNT(*) AS Missingvalues
FROM applestore_description_combinbed
WHERE app_desc IS NULL

-- Find out number of apps per genre

SELECT prime_genre, COUNT(*) AS NumApps
FROM AppleStore
GROUP BY prime_genre
ORDER BY NumApps DESC


-- Get an overview of the apps ratings 

SELECT min(user_rating) AS Minrating,
       max(user_rating) As Maxrating,
       avg(user_rating) As Avgrating
FROM AppleStore


**DATA ANALYSIS**

-- Determine whether paid apps have higher ratings than free appsAppleStore

SELECT CASE
           WHEN price > 0 THEN 'Paid'
           ELSE 'Free'
        END AS App_type,
        avg(user_rating) AS Avg_rating
FROM AppleStore
GROUP BY App_type
        
-- Check if apps with more supported languages have higher ratings

SELECT CASE
           WHEN lang_num < 10 THEN '<10 languages'
           WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 languages'
           ELSE '>30 languages'
       END AS languages_bucket,
       avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY languages_bucket
ORDER BY Avg_Rating DESC

-- Check genres with low ratings

SELECT prime_genre,
       avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY prime_genre
ORDER BY Avg_Rating ASC
LIMIT 10

-- Check if there is correlation between the length of the app description and the user rating 

SELECT CASE
           WHEN length(b.app_desc) <500 THEN 'Short'
           WHEN length(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
           ELSE 'Long'
       END AS description_length_bucket,
       avg(a.user_rating) AS average_rating
FROM
     AppleStore AS A 
JOIN
     applestore_description_combinbed AS b 
ON
     a.id = b.id
     
GROUP BY description_length_bucket
ORDER BY average_rating DESC

-- Check the top-rated apps for each genre 

SELECT
      prime_genre,
      track_name,
      user_rating
FROM (
       SELECT
       prime_genre,
       track_name,
       user_rating,
       RANK () OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank 
       FROM
       AppleStore
      ) AS a
WHERE
a.rank = 1

**Data Analysis Findings** 
-- Paid apps have better ratings 
-- Apps supporting between 10 and 30 languages have better ratings
-- Finance and Book apps have low ratings 
-- Apps with longer description have better ratings 
